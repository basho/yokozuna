commit 13449f7dc2ac0d205180611f2de6e1371cd88a4b
Author: Zeeshan Lakhani <zeeshan.lakhani@gmail.com>
Date:   Thu May 7 00:20:08 2015 +0900

    Update patches for Solr 4.10.4

diff --git a/solr/core/src/java/org/apache/solr/handler/component/HttpShardHandlerFactory.java b/solr/core/src/java/org/apache/solr/handler/component/HttpShardHandlerFactory.java
index f574f29..42168df 100644
--- a/solr/core/src/java/org/apache/solr/handler/component/HttpShardHandlerFactory.java
+++ b/solr/core/src/java/org/apache/solr/handler/component/HttpShardHandlerFactory.java
@@ -29,6 +29,7 @@ import java.util.concurrent.ThreadPoolExecutor;
 import java.util.concurrent.TimeUnit;
 
 import org.apache.commons.lang.StringUtils;
+import org.apache.http.params.HttpConnectionParams;
 import org.apache.http.client.HttpClient;
 import org.apache.http.impl.client.DefaultHttpClient;
 import org.apache.http.impl.client.DefaultHttpRequestRetryHandler;
@@ -163,7 +164,8 @@ public class HttpShardHandlerFactory extends ShardHandlerFactory implements org.
       clientParams.set(HttpClientUtil.PROP_USE_RETRY, false);
     }
     this.defaultClient = HttpClientUtil.createClient(clientParams);
-    
+    this.defaultClient.getParams().setParameter(HttpConnectionParams.STALE_CONNECTION_CHECK, false);
+    this.defaultClient.getParams().setParameter(HttpConnectionParams.TCP_NODELAY, true);
     // must come after createClient
     if (useRetries) {
       // our default retry handler will never retry on IOException if the request has been sent already,
diff --git a/solr/solrj/src/java/org/apache/solr/client/solrj/impl/HttpClientUtil.java b/solr/solrj/src/java/org/apache/solr/client/solrj/impl/HttpClientUtil.java
index fcbc80d..c98c982 100644
--- a/solr/solrj/src/java/org/apache/solr/client/solrj/impl/HttpClientUtil.java
+++ b/solr/solrj/src/java/org/apache/solr/client/solrj/impl/HttpClientUtil.java
@@ -17,6 +17,9 @@
 package org.apache.solr.client.solrj.impl;
 
 import java.io.IOException;
+import java.util.concurrent.Executors;
+import java.util.concurrent.ScheduledExecutorService;
+import java.util.concurrent.TimeUnit;
 import java.io.InputStream;
 import java.util.zip.GZIPInputStream;
 import java.util.zip.InflaterInputStream;
@@ -115,6 +118,16 @@ public class HttpClientUtil {
       logger.debug("Creating new http client, config:" + config);
     }
     final DefaultHttpClient httpClient = new SystemDefaultHttpClient();
+    final org.apache.http.conn.ClientConnectionManager mgr = httpClient.getConnectionManager();
+
+    // Note: The sweeper task is assuming hard-coded Jetty max-idle of 50s.
+    final Runnable sweeper = new Runnable() {
+        public void run() {
+            mgr.closeIdleConnections(40, TimeUnit.SECONDS);
+        }
+    };
+    final ScheduledExecutorService stp = Executors.newScheduledThreadPool(1);
+    stp.scheduleWithFixedDelay(sweeper, 5, 5, TimeUnit.SECONDS);
     configureClient(httpClient, config);
     return httpClient;
   }
